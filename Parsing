import sqlparse
import pandas as pd
from sqlparse.sql import IdentifierList, Identifier, Function
from sqlparse.tokens import Keyword, DML

def is_subselect(parsed):
    if not parsed.is_group:
        return False
    for item in parsed.tokens:
        if item.ttype is DML and item.value.upper() == 'SELECT':
            return True
    return False

def extract_from_part(parsed):
    from_seen = False
    for item in parsed.tokens:
        if from_seen:
            if is_subselect(item):
                for x in extract_from_part(item):
                    yield x
            elif item.ttype is Keyword and item.value.upper() in ['ORDER BY', 'GROUP BY', 'HAVING', 'LIMIT', 'UNION', 'EXCEPT', 'INTERSECT']:
                from_seen = False
                return
            elif item.ttype is None:
                for x in item.flatten():
                    if x.ttype is None:
                        yield x
        elif item.ttype is Keyword and item.value.upper() == 'FROM':
            from_seen = True

def extract_table_identifiers(token_stream):
    tables = {}
    current_table = None
    for item in token_stream:
        if isinstance(item, Identifier):
            current_table = item.get_real_name()
            tables[current_table] = {"columns": set(), "select": set(), "where": set(), "join": set()}
        elif isinstance(item, IdentifierList):
            for identifier in item.get_identifiers():
                current_table = identifier.get_real_name()
                tables[current_table] = {"columns": set(), "select": set(), "where": set(), "join": set()}
        elif item.ttype is Keyword:
            current_table = item.value
            tables[current_table] = {"columns": set(), "select": set(), "where": set(), "join": set()}
    return tables

def extract_columns(token_stream, tables):
    select_seen = False
    where_seen = False
    current_table = None
    for item in token_stream:
        if select_seen:
            if item.ttype is Keyword and item.value.upper() in ['FROM', 'WHERE', 'ORDER BY', 'GROUP BY', 'HAVING', 'LIMIT', 'UNION', 'EXCEPT', 'INTERSECT']:
                select_seen = False
                if item.value.upper() == 'WHERE':
                    where_seen = True
                return
            elif isinstance(item, Identifier):
                column = item.get_real_name()
                if current_table in tables:
                    tables[current_table]["columns"].add(column)
                    tables[current_table]["select"].add(column)
            elif isinstance(item, IdentifierList):
                for identifier in item.get_identifiers():
                    column = identifier.get_real_name()
                    if current_table in tables:
                        tables[current_table]["columns"].add(column)
                        tables[current_table]["select"].add(column)
        elif where_seen:
            if item.ttype is Keyword and item.value.upper() in ['ORDER BY', 'GROUP BY', 'HAVING', 'LIMIT', 'UNION', 'EXCEPT', 'INTERSECT']:
                where_seen = False
                return
            elif isinstance(item, Identifier):
                column = item.get_real_name()
                if current_table in tables:
                    tables[current_table]["columns"].add(column)
                    tables[current_table]["where"].add(column)
            elif isinstance(item, IdentifierList):
                for identifier in item.get_identifiers():
                    column = identifier.get_real_name()
                    if current_table in tables:
                        tables[current_table]["columns"].add(column)
                        tables[current_table]["where"].add(column)
        elif item.ttype is DML and item.value.upper() == 'SELECT':
            select_seen = True
        elif item.ttype is Keyword and item.value.upper() == 'FROM':
            current_table = None
        elif isinstance(item, Identifier):
            current_table = item.get_real_name()
        elif isinstance(item, IdentifierList):
            for identifier in item.get_identifiers():
                current_table = identifier.get_real_name()
    return tables

def extract_joins(token_stream, tables):
    join_seen = False
    current_table = None
    for item in token_stream:
        if join_seen:
            if item.ttype is Keyword and item.value.upper() == 'ON':
                join_seen = False
                return
            elif isinstance(item, Identifier):
                column = item.get_real_name()
                if current_table in tables:
                    tables[current_table]["columns"].add(column)
                    tables[current_table]["join"].add(column)
            elif isinstance(item, IdentifierList):
                for identifier in item.get_identifiers():
                    column = identifier.get_real_name()
                    if current_table in tables:
                        tables[current_table]["columns"].add(column)
                        tables[current_table]["join"].add(column)
        elif item.ttype is Keyword and item.value.upper() in ['JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'INNER JOIN']:
            join_seen = True
        elif isinstance(item, Identifier):
            current_table = item.get_real_name()
        elif isinstance(item, IdentifierList):
            for identifier in item.get_identifiers():
                current_table = identifier.get_real_name()
    return tables

def get_table_and_columns(query):
    tables = {}
    parsed = sqlparse.parse(query)
    for item in parsed:
        if is_subselect(item):
            tables.update(extract_table_identifiers(extract_from_part(item)))
            tables = extract_columns(item.tokens, tables)
            tables = extract_joins(item.tokens, tables)
        else:
            tables.update(extract_table_identifiers(extract_from_part(item)))
            tables = extract_columns(item.tokens, tables)
            tables = extract_joins(item.tokens, tables)
    return tables

def save_to_excel(tables, filename):
    data = []
    for table, details in tables.items():
        for column in details["columns"]:
            data.append({
                "Table": table,
                "Column": column,
                "Select": column in details["select"],
                "Where": column in details["where"],
                "Join": column in details["join"]
            })
    df = pd.DataFrame(data)
    df.to_excel(filename, index=False)

query = """
SELECT a.id, a.name, b.address 
FROM table1 a 
JOIN (SELECT id, address FROM table2) b 
ON a.id = b.id 
WHERE a.status = 'active'
"""

tables = get_table_and_columns(query)
filename = "sql_analysis.xlsx"
save_to_excel(tables, filename)
print(f"Data saved to {filename}")
